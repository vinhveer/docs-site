---
let initialHtml = Astro.props.html || '';
let initialCss = Astro.props.css || '';
let initialJs = Astro.props.js || '';
let previewHeight = Astro.props.height || '400px';
---

<div class="code-editor-container" style={`--preview-height: ${previewHeight}`}>
  <!-- See Code Button -->
  <button id="see-code-btn" class="see-code-button">See Code</button>
  
  <!-- Editor Section (1/3) -->
  <div class="editor-container hidden">
    <div class="tab-buttons">
      <button class="tab-button active" data-tab="html">HTML</button>
      <button class="tab-button" data-tab="css">CSS</button>
      <button class="tab-button" data-tab="js">JavaScript</button>
    </div>
    
    <div class="editor-tabs">
      <textarea class="editor-tab active" id="html-input" placeholder="HTML code…">{initialHtml}</textarea>
      <textarea class="editor-tab" id="css-input" placeholder="CSS code…">{initialCss}</textarea>
      <textarea class="editor-tab" id="js-input" placeholder="JS code…">{initialJs}</textarea>
    </div>
  </div>
  
  <!-- Preview Section with Fullscreen Button -->
  <div class="preview-container">
    <div class="preview-header">
      <span class="preview-title">Preview</span>
      <button id="fullscreen-btn" class="fullscreen-button" title="Fullscreen">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M7 14H5v5h5v-2M7 10H5V5h5v2m7 7h2v-5h-5v2m5-10h-5V2h5v5z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
    </div>
    <iframe class="preview" sandbox="allow-scripts" id="preview"></iframe>
  </div>
</div>

<!-- Fullscreen Modal -->
<div id="fullscreen-modal" class="fullscreen-modal hidden">
  <div class="fullscreen-header">
    <span class="fullscreen-title">Preview - Fullscreen</span>
    <button id="close-fullscreen-btn" class="close-fullscreen-button" title="Close Fullscreen">
      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M18 6L6 18M6 6l12 12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </button>
  </div>
  <iframe class="fullscreen-preview" sandbox="allow-scripts" id="fullscreen-preview"></iframe>
</div>

<style>
  /* Using namespaced class to avoid conflicts with Tailwind */
  .code-editor-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    --editor-height: 200px;
    --preview-height: 400px;
    --border-radius: 0.25rem;
    --spacing: 1rem;
  }
  
  .code-editor-container .see-code-button {
    padding: 0.5rem 1rem;
    background-color: var(--theme-accent, #4a90e2);
    color: var(--theme-accent-text, white);
    border: none;
    border-radius: var(--border-radius);
    cursor: pointer;
    align-self: flex-start;
    transition: opacity 0.2s ease;
  }
  
  .code-editor-container .see-code-button:hover {
    opacity: 0.9;
  }
  
  .code-editor-container .editor-container {
    display: flex;
    flex-direction: column;
    margin-bottom: var(--spacing);
  }
  
  .code-editor-container .hidden {
    display: none;
  }
  
  .code-editor-container .tab-buttons {
    display: flex;
    gap: 0.25rem;
  }
  
  .code-editor-container .tab-button {
    padding: 0.5rem 1rem;
    background-color: var(--theme-bg-offset, #f1f1f1);
    color: var(--theme-text, #333);
    border: none;
    border-bottom: 2px solid transparent;
    cursor: pointer;
    transition: all 0.2s ease;
  }
  
  .code-editor-container .tab-button.active {
    background-color: var(--theme-bg, white);
    border-bottom: 2px solid var(--theme-accent, #4a90e2);
  }
  
  .code-editor-container .editor-tabs {
    position: relative;
  }
  
  .code-editor-container .editor-tab {
    display: none;
    width: 100%;
    height: var(--editor-height);
    padding: 0.5rem;
    background-color: var(--theme-code-bg, #f8f8f8);
    color: var(--theme-code-text, #333);
    border: 1px solid var(--theme-divider, #ddd);
    font-family: monospace;
    resize: vertical;
    min-height: var(--editor-height);
  }
  
  .code-editor-container .editor-tab.active {
    display: block;
  }
  
  .code-editor-container .preview-container {
    display: flex;
    flex-direction: column;
    border: 1px solid var(--theme-divider, #ddd);
    border-radius: var(--border-radius);
    overflow: hidden;
  }
  
  .code-editor-container .preview-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem 1rem;
    background-color: var(--theme-bg-offset, #f1f1f1);
    border-bottom: 1px solid var(--theme-divider, #ddd);
  }
  
  .code-editor-container .preview-title {
    font-weight: 500;
    color: var(--theme-text, #333);
    font-size: 0.9rem;
  }
  
  .code-editor-container .fullscreen-button {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.25rem;
    background-color: transparent;
    color: var(--theme-text, #333);
    border: none;
    border-radius: var(--border-radius);
    cursor: pointer;
    transition: all 0.2s ease;
  }
  
  .code-editor-container .fullscreen-button:hover {
    background-color: var(--theme-divider, #ddd);
  }
  
  .code-editor-container .preview {
    width: 100%;
    height: var(--preview-height);
    border: none;
    background-color: var(--theme-bg, white);
  }
  
  /* Fullscreen Modal Styles */
  .fullscreen-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background-color: var(--theme-bg, white);
    z-index: 9999;
    display: flex;
    flex-direction: column;
  }
  
  .fullscreen-modal.hidden {
    display: none;
  }
  
  .fullscreen-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    background-color: var(--theme-bg-offset, #f1f1f1);
    border-bottom: 1px solid var(--theme-divider, #ddd);
  }
  
  .fullscreen-title {
    font-weight: 500;
    color: var(--theme-text, #333);
    font-size: 1rem;
  }
  
  .close-fullscreen-button {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.5rem;
    background-color: transparent;
    color: var(--theme-text, #333);
    border: none;
    border-radius: var(--border-radius);
    cursor: pointer;
    transition: all 0.2s ease;
  }
  
  .close-fullscreen-button:hover {
    background-color: var(--theme-divider, #ddd);
  }
  
  .fullscreen-preview {
    flex: 1;
    width: 100%;
    border: none;
    background-color: var(--theme-bg, white);
  }
</style>

<script>
  const htmlInput = document.getElementById('html-input') as HTMLTextAreaElement;
  const cssInput = document.getElementById('css-input') as HTMLTextAreaElement;
  const jsInput = document.getElementById('js-input') as HTMLTextAreaElement;
  const preview = document.getElementById('preview') as HTMLIFrameElement;
  const fullscreenPreview = document.getElementById('fullscreen-preview') as HTMLIFrameElement;
  const tabButtons = document.querySelectorAll('.tab-button');
  const seeCodeBtn = document.getElementById('see-code-btn');
  const editorContainer = document.querySelector('.editor-container');
  const fullscreenBtn = document.getElementById('fullscreen-btn');
  const fullscreenModal = document.getElementById('fullscreen-modal');
  const closeFullscreenBtn = document.getElementById('close-fullscreen-btn');

  // Toggle editor visibility when "See Code" button is clicked
  if (seeCodeBtn && editorContainer) {
    seeCodeBtn.addEventListener('click', () => {
      editorContainer.classList.toggle('hidden');
      
      // Change button text based on visibility
      if (editorContainer.classList.contains('hidden')) {
        seeCodeBtn.textContent = 'See Code';
      } else {
        seeCodeBtn.textContent = 'Hide Code';
      }
    });
  }

  // Fullscreen functionality
  if (fullscreenBtn && fullscreenModal && closeFullscreenBtn) {
    fullscreenBtn.addEventListener('click', () => {
      fullscreenModal.classList.remove('hidden');
      document.body.style.overflow = 'hidden'; // Prevent background scrolling
      updateFullscreenPreview();
    });

    closeFullscreenBtn.addEventListener('click', () => {
      fullscreenModal.classList.add('hidden');
      document.body.style.overflow = ''; // Restore scrolling
    });

    // Close fullscreen on Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && !fullscreenModal.classList.contains('hidden')) {
        fullscreenModal.classList.add('hidden');
        document.body.style.overflow = '';
      }
    });
  }

  // Tab switching functionality
  tabButtons.forEach(button => {
    button.addEventListener('click', () => {
      const tabName = button.getAttribute('data-tab');
      if (!tabName) return;
      
      // Update active tab button
      tabButtons.forEach(btn => btn.classList.remove('active'));
      button.classList.add('active');
      
      // Update active editor
      document.querySelectorAll('.editor-tab').forEach(tab => tab.classList.remove('active'));
      const activeTab = document.getElementById(`${tabName}-input`);
      if (activeTab) {
        activeTab.classList.add('active');
      }
    });
  });

  function generatePreviewContent() {
    return `
<!DOCTYPE html>
<html lang="en">
<head><meta charset="utf-8"><style>${cssInput.value}</style></head>
<body>${htmlInput.value}<script>${jsInput.value}<\/script></body>
</html>`;
  }

  function updatePreview() {
    const srcdoc = generatePreviewContent();
    preview.srcdoc = srcdoc;
  }

  function updateFullscreenPreview() {
    const srcdoc = generatePreviewContent();
    fullscreenPreview.srcdoc = srcdoc;
  }

  // Update both previews when content changes
  function updateAllPreviews() {
    updatePreview();
    // Only update fullscreen preview if it's currently visible
    if (fullscreenModal && !fullscreenModal.classList.contains('hidden')) {
      updateFullscreenPreview();
    }
  }

  htmlInput.addEventListener('input', updateAllPreviews);
  cssInput.addEventListener('input', updateAllPreviews);
  jsInput.addEventListener('input', updateAllPreviews);
  
  // Initial preview update
  updatePreview();
</script>